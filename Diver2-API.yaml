openapi: 3.0.3
info:
  title: Diver API
  description: The second version of Diver API documentation.
  version: 2.0.0
  contact:
    name: SeungBin Kim
    email: seungbin0508@gmail.com
    url: https://github.com/seungbin0508
servers:
  - url: "http://localhost:3000/v2"
paths:
  /users:
  /books:
    get:
      tags: ["Book"]
  /books/:book_id:
    get:
      tags: ["Book"]
      summary: Gets a book
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
            example: 9788937460777
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        default:
          $ref: "#/components/responses/Default"
  /books/bestsellers:
    get:
      tags: ["Book"]
      summary: Gets array of best selling books
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        default:
          $ref: "#/components/responses/Default"
  /books/:book_id/reviews:
    get:
      tags: ["Review"]
      summary: Gets array of all reviews of one book
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags: ["Review"]
      summary: Create new review of book
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        default:
          $ref: "#/components/responses/Default"
  /books/:book_id/reviews/:review_id:
    parameters:
      - $ref: "#/components/parameters/book_id"
        $ref: "#/components/parameters/review_id"
    get:
      tags: ["Review"]
      summary: Gets review
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        default:
          $ref: "#/components/schemas/Review"
    put:
      tags: ["Review"]
      summary: Updates review
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        '403':
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags: ["Review"]
      summary: Deletes review
      responses:
        '204':
          description: No content
        '403':
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Default"
  /feeds:
    get:
      tags: ["Feed"]
      summary: Gets feeds
      description: Based on query, client can retreive one of recent, popular or social feeds.
      parameters:
        - in: query
          name: order
          schema:
            type: string
            enum: ["recent", "popular", "social"]
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feeds"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /follows/followers/:user_id:
    get:
      tags: ["Follower"]
      summary: Gets array of users following given user ID
      parameters:
        - $ref: "#/components/schemas/user_id"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                  # Array of basic user information with user image, nickname and user_id
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /follows/followees/:user_id:
    get:
      tags: ["Follower"]
      summary: Gets array of users whom given user ID follows
      parameters:
        - $ref: "#/components/schemas/user_id"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                  # Duplicate exists at getting follower list. Should be replaced with reference
    post:
      tags: ["Follower"]
      responses:
        '403':
          $ref: "#/components/responses/Forbidden"
    delete:
      tags: ["Follower"]
      responses:
        '403':
          $ref: "#/components/responses/Forbidden"
  /collections:
    get:
      tags: ["Collection"]
      summary: Gets array of collections
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags: ["Collection"]
      summary: Adds new collection
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
  /collections/:collection_id:
    parameters:
      - $ref: "#/components/parameters/collection_id"
    get:
      tags: ["Collection"]
      summary: Gets a collection
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags: ["Collection"]
      summary: Updates a collection
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        '403':
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags: ["Collection"]
      summary: Deletes a collection and its comments
      responses:
        '204':
          description: Success
  /collections/:collection_id/comments:
    parameters:
      - $ref: "#/components/parameters/collection_id"
    get:
      tags: ["Collection"]
      summary: Gets array of comments of given collection ID
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags: ["Collection"]
      summary: Adds new comment at given collection ID
      description: Returns updated collection of given ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
  /collections/:collection_id/comments/:comment_id:
    parameters:
      - $ref: "#/components/parameters/collection_id"
      - $ref: "#/components/parameters/comment_id"
    put:
      tags: ["Collection"]
      summary: Updates a comment of given collection ID
      description: Returns updated collection of given ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags: ["Collection"]
      summary: Delets a comment
      description: Returns updated collection of given ID
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
  /suggestions:
  /search:
components:
  schemas:
    Book:
      type:
        object
      required: ["_id", "title", ]
      properties:
        _id:
          type: string
          readOnly: true
          minLength: 10
          maxLength: 13
          description: ISBN of a book.
          example: 9788937460777
        title:
          type: string
          readOnly: true
          example: 1984
        link:
          type: string
          format: uri
          readOnly: true
          description: A link of the book's info in naver book search.
          example: https://book.naver.com/bookdb/book_detail.naver?bid=125627
        image:
          type: string
          format: uri
          readOnly: true
          description: Book's cover image
          example: https://www.example.com
        author:
          type: string
          readOnly: true
          example: 조지 오웰
        price:
          type: integer
          readOnly: true
          minimum: 0
          example: 9500
        discount:
          type: number
          format: double
          readOnly: true
          example: 0.1
        pubdate:
          type: string
          format: date
          readOnly: true
          description: Published date
        review_count:
          type: integer
          readOnly: true
          minimum: 0
          default: 0
          description: Number of reviews on the book
          example: 22
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
          example: ["세계문학", "저항"]
    Review:
      type: object
      required: []
      properties:
        user_id:
          type: string
          format: uuid
          example: 507f191e810c19729de860ea
          description: Object ID of user document
        book_id:
          type: string
          format: uuid
          example: 5349b4ddd2781d08c09890f3
          description: Object ID of book document
        comment_count:
          type: integer
          readOnly: true
          minimum: 0
          default: 0
          description: Number of comments on the review
          example: 58
        like_count:
          type: integer
          readOnly: true
          minimum: 0
          default: 0
          description: Number of likes on the review
          example: 8
        quote:
          type: string
          description: Quote from the book
          example: BIG BROTHER IS WATCHING YOU
        content:
          type: string
          description: Actual review
          example: '언어가 사고를 지배한다'는 사상에 입각하여, 당은 영어를 바탕으로 신어(newspeak)라는 사상통제용 언어를 새로 만들어 사람들이 당의 방침에 대한 어떠한 의문도 가지지 못하게 한다. 이전의 언어는 구어(oldspeak)라고 하여 점차 사용 빈도 수를 줄이며 사어화시킨다.
        image_uri:
          type: string
          format: uri
          readOnly: true
        tags:
          type: array
          items:
            type: string
          description: Tags describing the book
          example: ["독재", "교양", "디스토피아", "영국"]
        timestamp:
          $ref: "#/components/schemas/Timestamp"
    Comment:
      type: object
      required: ["content"]
      properties:
        _id:
          type: string
          format: uuid
          readOnly: true
          example: 507f191e810c19729de860ea
          description: Object ID of comment document
        user_id:
          $ref: "#/components/schemas/object_id"
        review_id:
          $ref: "#/components/schemas/object_id"
        content:
          type: string
          description: Actual comment
        timestamp:
          $ref: "#/components/schemas/Timestamp"
    Collection:
      type: object
      required: ["name"]
      properties:
        _id:
          $ref: "#/components/schemas/object_id"
        name:
          type: string
        type:
          type: string
          enum: ["tag", "custom", "best", "genre"]
          default: custom
          description: Type of collection. custom collection is user made collection. Whereas other types are server made collections.
        content:
          type: object
          required: ["book_id"]
          properties:
            book_id:
              $ref: "#/components/schemas/object_id"
            book_description:
              type: string
        description:
          type: string
          description: Description of collection
        comment_count:
          $ref: "#/components/schemas/Count"
        like_count:
          $ref: "#/components/schemas/Count"
        image_uri:
          type: string
          format: uri
          readOnly: true
          description: URI of image saved on server
        image:
          type: string
          format: binary
          writeOnly: true
          description: Binary of actual image file which user uploads
        timestamp:
          $ref: "#/components/schemas/Timestamp"
    User:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/object_id"
        nickname:
          type: string
        oauth:
          type: object
          readOnly: true
          properties:
            provider:
              type: string
              enum: ["naver", "kakao", "google"]
            providerKey:
              type: string
        progress:
          type: object
          properties:
            level:
              type: integer
              default: 1
              readOnly: true
            exp:
              type: integer
              default: 0
              readOnly: true
            treasure:
              type: boolean
              description: If true, user may receive new treasure. After receiving treasure, it becomes false. When user reaches certain levels (e.g. multiple of 5) it becomes true.
              default: false
              example: false
        profileImages:
          type: object
          description: Info related to profile image
          properties:
            current:
              type: integer
              default: 0
              description: Index of profile image which user is currently using
            possessions:
              type: array
              items:
                type: boolean
              example: [true, true, false, false, true]
              description: Boolean array with value of the index referrs
        bookmarks:
          description: Array of book IDs (ISBN) which user added as bookmark.
          type: array
          items:
            $ref: "#/components/parameters/book_id"
          example: ["9788937460777", "9788932917207"]
        recentlyRead:
          # todo 이 정보가 API 에는 필요 없을 것 같아서 db 구조에만 넣고 여기서는 빼도 될거같긴함
          type: object
          description: |
            Saves document ID of reviews and collections which user recently read. Saves up to 7 days.
            Feed of recent type provide new reviews within 7 days which are not in user's read reviews/collections.
          properties:
            reviews:
              type: array
              items:
                type: object
                required: ["review_id", "time"]
                properties:
                  review_id:
                    $ref: "#/components/schemas/object_id"
                  time:
                    type: string
                    format: date-time
                    description: Time (and date) of reading
            collections:
              type: array
              items:
                type: object
                required: ["collection_id", "time"]
                properties:
                  collection_id:
                    $ref: "#/components/schemas/object_id"
                  time:
                    type: string
                    format: date-time
                    description: Time (and date) of reading
        alerts:
          type: object
          readOnly: true
          required: ["type", "sender"]
          properties:
            type:
              type: string
              enum: ["like", "comment", "follow"]
              example: "comment"
            sender:
              # todo 필수인지 확인해야함
              $ref: "#/components/schemas/object_id"
            target:
              type: object
              example:
                type: "review"
                _id: 507f191e810c19729de860ea
              properties:
                type:
                  type: string
                  enum: ["review", "collection"]
                _id:
                  $ref: "#/components/schemas/object_id"
            isRead:
              type: boolean
              default: false
              example: true
            # todo 여기 원래 comment 라는게 있었는데 댓글 내용인건지?
    AbstractUser:
      type: object
      description: Abstract version of user object. Only contains essential info related to follow.
      properties:
        _id:
          $ref: "#/components/schemas/object_id"
        nickname:
          type: string
        profileImage:
          type: integer
          description: Profile image which the user is currently using.
          example: 2
        mutualFollow:
          type: boolean
          description: Whether this user mutually follow current user.
          example: true
    object_id:
      type: string
      format: uuid
      readOnly: true
      example: 507f191e810c19729de860ea
      description: Object ID of document
    Count:
      type: integer
      readOnly: true
      minimum: 0
      default: 0
      example: 58
    Timestamp:
      type: object
      readOnly: true
      properties:
        createAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 9000
        message:
          type: string
          example: UNKNOWN_SERVER_ERROR
  responses:
    Forbidden:
      description: User ID in path and session token don't match.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Default:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    # todo add Invalid ID responses
  parameters:
    book_id:
      in: path
      name: book_id
      required: true
      schema:
        type: string
        minLength: 10
        maxLength: 13
        example: 9788937460777
    review_id:
      in: path
      name: review_id
      required: true
      schema:
        type: string
    collection_id:
      in: path
      name: collection_id
      required: true
      schema:
        type: string
    comment_id:
      in: path
      name: comment_id
      required: true
      schema:
        type: string
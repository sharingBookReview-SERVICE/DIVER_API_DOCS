openapi: 3.0.3
info:
  title: Diver API
  description: The second version of Diver API documentation.
  version: 2.0.0
  contact:
    name: SeungBin Kim
    email: seungbin0508@gmail.com
    url: https://github.com/seungbin0508
servers:
  - url: "http://localhost:3000/v2"
paths:
  /users:
  /books:
    get:
      tags: ["Book"]
  /books/:book_id:
    get:
      tags: ["Book"]
      summary: Gets a book
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
            example: 9788937460777
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        default:
          $ref: "#/components/responses/Default"
  /books/bestsellers:
    get:
      tags: ["Book"]
      summary: Gets array of best selling books
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        default:
          $ref: "#/components/responses/Default"
  /feeds:
    get:
      tags: ["Feed"]
      summary: Gets feeds
      description: Based on query, client can retreive one of recent, popular or social feeds.
      parameters:
        - in: query
          name: order
          schema:
            type: string
            enum: ["recent", "popular", "social"]
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feeds"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /follows/followers/:user_id:
    get:
      tags: ["Follower"]
      summary: Gets array of users following given user ID
      parameters:
        - $ref: "#/components/schemas/user_id"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                  # Array of basic user information with user image, nickname and user_id
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /follows/followees/:user_id:
    get:
      tags: ["Follower"]
      summary: Gets array of users whom given user ID follows
      parameters:
        - $ref: "#/components/schemas/user_id"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                  # Duplicate exists at getting follower list. Should be replaced with reference
    post:
      tags: ["Follower"]
      responses:
        '403':
          $ref: "#/components/responses/Forbidden"
    delete:
      tags: ["Follower"]
      responses:
        '403':
          $ref: "#/components/responses/Forbidden"
  /collections:
    get:
      tags: ["Collection"]
      summary: Gets array of collections
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags: ["Collection"]
      summary: Adds new collection
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
  /collections/:collection_id:
    parameters:
      - $ref: "#/components/parameters/collection_id"
    get:
      tags: ["Collection"]
      summary: Gets a collection
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags: ["Collection"]
      summary: Updates a collection
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        '403':
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags: ["Collection"]
      summary: Deletes a collection and its comments
      responses:
        '204':
          description: Success
  /collections/:collection_id/comments:
    parameters:
      - $ref: "#/components/parameters/collection_id"
    get:
      tags: ["Collection"]
      summary: Gets array of comments of given collection ID
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags: ["Collection"]
      summary: Adds new comment at given collection ID
      description: Returns updated collection of given ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
  /collections/:collection_id/comments/:comment_id:
    parameters:
      - $ref: "#/components/parameters/collection_id"
      - $ref: "#/components/parameters/comment_id"
    put:
      tags: ["Collection"]
      summary: Updates a comment of given collection ID
      description: Returns updated collection of given ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags: ["Collection"]
      summary: Delets a comment
      description: Returns updated collection of given ID
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
  /suggestions:
  /search:
components:
  schemas:
    Book:
      type:
        object
      required: ["_id", "title", ]
      properties:
        _id:
          type: string
          readOnly: true
          minLength: 10
          maxLength: 13
          description: ISBN of a book.
          example: 9788937460777
        title:
          type: string
          readOnly: true
          example: 1984
        link:
          type: string
          format: uri
          readOnly: true
          description: A link of the book's info in naver book search.
          example: https://book.naver.com/bookdb/book_detail.naver?bid=125627
        image:
          type: string
          format: uri
          readOnly: true
          description: Book's cover image
          example: https://www.example.com
        author:
          type: string
          readOnly: true
          example: 조지 오웰
        price:
          type: integer
          readOnly: true
          minimum: 0
          example: 9500
        discount:
          type: number
          format: double
          readOnly: true
          example: 0.1
        pubdate:
          type: string
          format: date
          readOnly: true
          description: Published date
        review_count:
          type: integer
          readOnly: true
          minimum: 0
          default: 0
          description: Number of reviews on the book
          example: 22
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
          example: ["세계문학", "저항"]
  responses:
    Forbidden:
      description: User ID in path and session token don't match.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"